// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Gergenus/commerce/product-service/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepositoryInterface creates a new instance of MockRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepositoryInterface is an autogenerated mock type for the RepositoryInterface type
type MockRepositoryInterface struct {
	mock.Mock
}

type MockRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepositoryInterface) EXPECT() *MockRepositoryInterface_Expecter {
	return &MockRepositoryInterface_Expecter{mock: &_m.Mock}
}

// AddCategory provides a mock function for the type MockRepositoryInterface
func (_mock *MockRepositoryInterface) AddCategory(ctx context.Context, category string) (int, error) {
	ret := _mock.Called(ctx, category)

	if len(ret) == 0 {
		panic("no return value specified for AddCategory")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return returnFunc(ctx, category)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = returnFunc(ctx, category)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, category)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryInterface_AddCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCategory'
type MockRepositoryInterface_AddCategory_Call struct {
	*mock.Call
}

// AddCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - category string
func (_e *MockRepositoryInterface_Expecter) AddCategory(ctx interface{}, category interface{}) *MockRepositoryInterface_AddCategory_Call {
	return &MockRepositoryInterface_AddCategory_Call{Call: _e.mock.On("AddCategory", ctx, category)}
}

func (_c *MockRepositoryInterface_AddCategory_Call) Run(run func(ctx context.Context, category string)) *MockRepositoryInterface_AddCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryInterface_AddCategory_Call) Return(n int, err error) *MockRepositoryInterface_AddCategory_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockRepositoryInterface_AddCategory_Call) RunAndReturn(run func(ctx context.Context, category string) (int, error)) *MockRepositoryInterface_AddCategory_Call {
	_c.Call.Return(run)
	return _c
}

// AddStockByID provides a mock function for the type MockRepositoryInterface
func (_mock *MockRepositoryInterface) AddStockByID(ctx context.Context, seller_id string, product_id int, number int) (int, error) {
	ret := _mock.Called(ctx, seller_id, product_id, number)

	if len(ret) == 0 {
		panic("no return value specified for AddStockByID")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) (int, error)); ok {
		return returnFunc(ctx, seller_id, product_id, number)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) int); ok {
		r0 = returnFunc(ctx, seller_id, product_id, number)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = returnFunc(ctx, seller_id, product_id, number)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryInterface_AddStockByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddStockByID'
type MockRepositoryInterface_AddStockByID_Call struct {
	*mock.Call
}

// AddStockByID is a helper method to define mock.On call
//   - ctx context.Context
//   - seller_id string
//   - product_id int
//   - number int
func (_e *MockRepositoryInterface_Expecter) AddStockByID(ctx interface{}, seller_id interface{}, product_id interface{}, number interface{}) *MockRepositoryInterface_AddStockByID_Call {
	return &MockRepositoryInterface_AddStockByID_Call{Call: _e.mock.On("AddStockByID", ctx, seller_id, product_id, number)}
}

func (_c *MockRepositoryInterface_AddStockByID_Call) Run(run func(ctx context.Context, seller_id string, product_id int, number int)) *MockRepositoryInterface_AddStockByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockRepositoryInterface_AddStockByID_Call) Return(n int, err error) *MockRepositoryInterface_AddStockByID_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockRepositoryInterface_AddStockByID_Call) RunAndReturn(run func(ctx context.Context, seller_id string, product_id int, number int) (int, error)) *MockRepositoryInterface_AddStockByID_Call {
	_c.Call.Return(run)
	return _c
}

// AllProducts provides a mock function for the type MockRepositoryInterface
func (_mock *MockRepositoryInterface) AllProducts(ctx context.Context) ([]*models.Product, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AllProducts")
	}

	var r0 []*models.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*models.Product, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*models.Product); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryInterface_AllProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllProducts'
type MockRepositoryInterface_AllProducts_Call struct {
	*mock.Call
}

// AllProducts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepositoryInterface_Expecter) AllProducts(ctx interface{}) *MockRepositoryInterface_AllProducts_Call {
	return &MockRepositoryInterface_AllProducts_Call{Call: _e.mock.On("AllProducts", ctx)}
}

func (_c *MockRepositoryInterface_AllProducts_Call) Run(run func(ctx context.Context)) *MockRepositoryInterface_AllProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepositoryInterface_AllProducts_Call) Return(products []*models.Product, err error) *MockRepositoryInterface_AllProducts_Call {
	_c.Call.Return(products, err)
	return _c
}

func (_c *MockRepositoryInterface_AllProducts_Call) RunAndReturn(run func(ctx context.Context) ([]*models.Product, error)) *MockRepositoryInterface_AllProducts_Call {
	_c.Call.Return(run)
	return _c
}

// CheckProductExists provides a mock function for the type MockRepositoryInterface
func (_mock *MockRepositoryInterface) CheckProductExists(ctx context.Context, seller_id string, product_name string) (bool, error) {
	ret := _mock.Called(ctx, seller_id, product_name)

	if len(ret) == 0 {
		panic("no return value specified for CheckProductExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return returnFunc(ctx, seller_id, product_name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = returnFunc(ctx, seller_id, product_name)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, seller_id, product_name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryInterface_CheckProductExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckProductExists'
type MockRepositoryInterface_CheckProductExists_Call struct {
	*mock.Call
}

// CheckProductExists is a helper method to define mock.On call
//   - ctx context.Context
//   - seller_id string
//   - product_name string
func (_e *MockRepositoryInterface_Expecter) CheckProductExists(ctx interface{}, seller_id interface{}, product_name interface{}) *MockRepositoryInterface_CheckProductExists_Call {
	return &MockRepositoryInterface_CheckProductExists_Call{Call: _e.mock.On("CheckProductExists", ctx, seller_id, product_name)}
}

func (_c *MockRepositoryInterface_CheckProductExists_Call) Run(run func(ctx context.Context, seller_id string, product_name string)) *MockRepositoryInterface_CheckProductExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepositoryInterface_CheckProductExists_Call) Return(b bool, err error) *MockRepositoryInterface_CheckProductExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRepositoryInterface_CheckProductExists_Call) RunAndReturn(run func(ctx context.Context, seller_id string, product_name string) (bool, error)) *MockRepositoryInterface_CheckProductExists_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProduct provides a mock function for the type MockRepositoryInterface
func (_mock *MockRepositoryInterface) CreateProduct(ctx context.Context, product models.Product) (int, error) {
	ret := _mock.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Product) (int, error)); ok {
		return returnFunc(ctx, product)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Product) int); ok {
		r0 = returnFunc(ctx, product)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.Product) error); ok {
		r1 = returnFunc(ctx, product)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryInterface_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type MockRepositoryInterface_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - product models.Product
func (_e *MockRepositoryInterface_Expecter) CreateProduct(ctx interface{}, product interface{}) *MockRepositoryInterface_CreateProduct_Call {
	return &MockRepositoryInterface_CreateProduct_Call{Call: _e.mock.On("CreateProduct", ctx, product)}
}

func (_c *MockRepositoryInterface_CreateProduct_Call) Run(run func(ctx context.Context, product models.Product)) *MockRepositoryInterface_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.Product
		if args[1] != nil {
			arg1 = args[1].(models.Product)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryInterface_CreateProduct_Call) Return(n int, err error) *MockRepositoryInterface_CreateProduct_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockRepositoryInterface_CreateProduct_Call) RunAndReturn(run func(ctx context.Context, product models.Product) (int, error)) *MockRepositoryInterface_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCategoryByID provides a mock function for the type MockRepositoryInterface
func (_mock *MockRepositoryInterface) DeleteCategoryByID(ctx context.Context, id int) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCategoryByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepositoryInterface_DeleteCategoryByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCategoryByID'
type MockRepositoryInterface_DeleteCategoryByID_Call struct {
	*mock.Call
}

// DeleteCategoryByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockRepositoryInterface_Expecter) DeleteCategoryByID(ctx interface{}, id interface{}) *MockRepositoryInterface_DeleteCategoryByID_Call {
	return &MockRepositoryInterface_DeleteCategoryByID_Call{Call: _e.mock.On("DeleteCategoryByID", ctx, id)}
}

func (_c *MockRepositoryInterface_DeleteCategoryByID_Call) Run(run func(ctx context.Context, id int)) *MockRepositoryInterface_DeleteCategoryByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryInterface_DeleteCategoryByID_Call) Return(err error) *MockRepositoryInterface_DeleteCategoryByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepositoryInterface_DeleteCategoryByID_Call) RunAndReturn(run func(ctx context.Context, id int) error) *MockRepositoryInterface_DeleteCategoryByID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProduct provides a mock function for the type MockRepositoryInterface
func (_mock *MockRepositoryInterface) DeleteProduct(ctx context.Context, id int) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepositoryInterface_DeleteProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProduct'
type MockRepositoryInterface_DeleteProduct_Call struct {
	*mock.Call
}

// DeleteProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockRepositoryInterface_Expecter) DeleteProduct(ctx interface{}, id interface{}) *MockRepositoryInterface_DeleteProduct_Call {
	return &MockRepositoryInterface_DeleteProduct_Call{Call: _e.mock.On("DeleteProduct", ctx, id)}
}

func (_c *MockRepositoryInterface_DeleteProduct_Call) Run(run func(ctx context.Context, id int)) *MockRepositoryInterface_DeleteProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryInterface_DeleteProduct_Call) Return(err error) *MockRepositoryInterface_DeleteProduct_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepositoryInterface_DeleteProduct_Call) RunAndReturn(run func(ctx context.Context, id int) error) *MockRepositoryInterface_DeleteProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetCategoryID provides a mock function for the type MockRepositoryInterface
func (_mock *MockRepositoryInterface) GetCategoryID(ctx context.Context, category string) (int, error) {
	ret := _mock.Called(ctx, category)

	if len(ret) == 0 {
		panic("no return value specified for GetCategoryID")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return returnFunc(ctx, category)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = returnFunc(ctx, category)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, category)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryInterface_GetCategoryID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCategoryID'
type MockRepositoryInterface_GetCategoryID_Call struct {
	*mock.Call
}

// GetCategoryID is a helper method to define mock.On call
//   - ctx context.Context
//   - category string
func (_e *MockRepositoryInterface_Expecter) GetCategoryID(ctx interface{}, category interface{}) *MockRepositoryInterface_GetCategoryID_Call {
	return &MockRepositoryInterface_GetCategoryID_Call{Call: _e.mock.On("GetCategoryID", ctx, category)}
}

func (_c *MockRepositoryInterface_GetCategoryID_Call) Run(run func(ctx context.Context, category string)) *MockRepositoryInterface_GetCategoryID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryInterface_GetCategoryID_Call) Return(n int, err error) *MockRepositoryInterface_GetCategoryID_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockRepositoryInterface_GetCategoryID_Call) RunAndReturn(run func(ctx context.Context, category string) (int, error)) *MockRepositoryInterface_GetCategoryID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductByID provides a mock function for the type MockRepositoryInterface
func (_mock *MockRepositoryInterface) GetProductByID(ctx context.Context, id int) (models.Product, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 models.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (models.Product, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) models.Product); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Product)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryInterface_GetProductByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductByID'
type MockRepositoryInterface_GetProductByID_Call struct {
	*mock.Call
}

// GetProductByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockRepositoryInterface_Expecter) GetProductByID(ctx interface{}, id interface{}) *MockRepositoryInterface_GetProductByID_Call {
	return &MockRepositoryInterface_GetProductByID_Call{Call: _e.mock.On("GetProductByID", ctx, id)}
}

func (_c *MockRepositoryInterface_GetProductByID_Call) Run(run func(ctx context.Context, id int)) *MockRepositoryInterface_GetProductByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryInterface_GetProductByID_Call) Return(product models.Product, err error) *MockRepositoryInterface_GetProductByID_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockRepositoryInterface_GetProductByID_Call) RunAndReturn(run func(ctx context.Context, id int) (models.Product, error)) *MockRepositoryInterface_GetProductByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductsByCategory provides a mock function for the type MockRepositoryInterface
func (_mock *MockRepositoryInterface) GetProductsByCategory(ctx context.Context, category string) ([]models.Product, error) {
	ret := _mock.Called(ctx, category)

	if len(ret) == 0 {
		panic("no return value specified for GetProductsByCategory")
	}

	var r0 []models.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]models.Product, error)); ok {
		return returnFunc(ctx, category)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []models.Product); ok {
		r0 = returnFunc(ctx, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, category)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryInterface_GetProductsByCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductsByCategory'
type MockRepositoryInterface_GetProductsByCategory_Call struct {
	*mock.Call
}

// GetProductsByCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - category string
func (_e *MockRepositoryInterface_Expecter) GetProductsByCategory(ctx interface{}, category interface{}) *MockRepositoryInterface_GetProductsByCategory_Call {
	return &MockRepositoryInterface_GetProductsByCategory_Call{Call: _e.mock.On("GetProductsByCategory", ctx, category)}
}

func (_c *MockRepositoryInterface_GetProductsByCategory_Call) Run(run func(ctx context.Context, category string)) *MockRepositoryInterface_GetProductsByCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryInterface_GetProductsByCategory_Call) Return(products []models.Product, err error) *MockRepositoryInterface_GetProductsByCategory_Call {
	_c.Call.Return(products, err)
	return _c
}

func (_c *MockRepositoryInterface_GetProductsByCategory_Call) RunAndReturn(run func(ctx context.Context, category string) ([]models.Product, error)) *MockRepositoryInterface_GetProductsByCategory_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductsBySellerID provides a mock function for the type MockRepositoryInterface
func (_mock *MockRepositoryInterface) GetProductsBySellerID(ctx context.Context, seller_id string) ([]models.Product, error) {
	ret := _mock.Called(ctx, seller_id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductsBySellerID")
	}

	var r0 []models.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]models.Product, error)); ok {
		return returnFunc(ctx, seller_id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []models.Product); ok {
		r0 = returnFunc(ctx, seller_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, seller_id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryInterface_GetProductsBySellerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductsBySellerID'
type MockRepositoryInterface_GetProductsBySellerID_Call struct {
	*mock.Call
}

// GetProductsBySellerID is a helper method to define mock.On call
//   - ctx context.Context
//   - seller_id string
func (_e *MockRepositoryInterface_Expecter) GetProductsBySellerID(ctx interface{}, seller_id interface{}) *MockRepositoryInterface_GetProductsBySellerID_Call {
	return &MockRepositoryInterface_GetProductsBySellerID_Call{Call: _e.mock.On("GetProductsBySellerID", ctx, seller_id)}
}

func (_c *MockRepositoryInterface_GetProductsBySellerID_Call) Run(run func(ctx context.Context, seller_id string)) *MockRepositoryInterface_GetProductsBySellerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryInterface_GetProductsBySellerID_Call) Return(products []models.Product, err error) *MockRepositoryInterface_GetProductsBySellerID_Call {
	_c.Call.Return(products, err)
	return _c
}

func (_c *MockRepositoryInterface_GetProductsBySellerID_Call) RunAndReturn(run func(ctx context.Context, seller_id string) ([]models.Product, error)) *MockRepositoryInterface_GetProductsBySellerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetStockByID provides a mock function for the type MockRepositoryInterface
func (_mock *MockRepositoryInterface) GetStockByID(ctx context.Context, product_id int) (int, error) {
	ret := _mock.Called(ctx, product_id)

	if len(ret) == 0 {
		panic("no return value specified for GetStockByID")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return returnFunc(ctx, product_id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = returnFunc(ctx, product_id)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, product_id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryInterface_GetStockByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStockByID'
type MockRepositoryInterface_GetStockByID_Call struct {
	*mock.Call
}

// GetStockByID is a helper method to define mock.On call
//   - ctx context.Context
//   - product_id int
func (_e *MockRepositoryInterface_Expecter) GetStockByID(ctx interface{}, product_id interface{}) *MockRepositoryInterface_GetStockByID_Call {
	return &MockRepositoryInterface_GetStockByID_Call{Call: _e.mock.On("GetStockByID", ctx, product_id)}
}

func (_c *MockRepositoryInterface_GetStockByID_Call) Run(run func(ctx context.Context, product_id int)) *MockRepositoryInterface_GetStockByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryInterface_GetStockByID_Call) Return(n int, err error) *MockRepositoryInterface_GetStockByID_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockRepositoryInterface_GetStockByID_Call) RunAndReturn(run func(ctx context.Context, product_id int) (int, error)) *MockRepositoryInterface_GetStockByID_Call {
	_c.Call.Return(run)
	return _c
}

// ReduceStock provides a mock function for the type MockRepositoryInterface
func (_mock *MockRepositoryInterface) ReduceStock(ctx context.Context, seller_id string, product_id int, number int) (int, error) {
	ret := _mock.Called(ctx, seller_id, product_id, number)

	if len(ret) == 0 {
		panic("no return value specified for ReduceStock")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) (int, error)); ok {
		return returnFunc(ctx, seller_id, product_id, number)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) int); ok {
		r0 = returnFunc(ctx, seller_id, product_id, number)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = returnFunc(ctx, seller_id, product_id, number)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryInterface_ReduceStock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReduceStock'
type MockRepositoryInterface_ReduceStock_Call struct {
	*mock.Call
}

// ReduceStock is a helper method to define mock.On call
//   - ctx context.Context
//   - seller_id string
//   - product_id int
//   - number int
func (_e *MockRepositoryInterface_Expecter) ReduceStock(ctx interface{}, seller_id interface{}, product_id interface{}, number interface{}) *MockRepositoryInterface_ReduceStock_Call {
	return &MockRepositoryInterface_ReduceStock_Call{Call: _e.mock.On("ReduceStock", ctx, seller_id, product_id, number)}
}

func (_c *MockRepositoryInterface_ReduceStock_Call) Run(run func(ctx context.Context, seller_id string, product_id int, number int)) *MockRepositoryInterface_ReduceStock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockRepositoryInterface_ReduceStock_Call) Return(n int, err error) *MockRepositoryInterface_ReduceStock_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockRepositoryInterface_ReduceStock_Call) RunAndReturn(run func(ctx context.Context, seller_id string, product_id int, number int) (int, error)) *MockRepositoryInterface_ReduceStock_Call {
	_c.Call.Return(run)
	return _c
}

// ReserveProducts provides a mock function for the type MockRepositoryInterface
func (_mock *MockRepositoryInterface) ReserveProducts(ctx context.Context, products []models.ProductsToReserve) error {
	ret := _mock.Called(ctx, products)

	if len(ret) == 0 {
		panic("no return value specified for ReserveProducts")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []models.ProductsToReserve) error); ok {
		r0 = returnFunc(ctx, products)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepositoryInterface_ReserveProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReserveProducts'
type MockRepositoryInterface_ReserveProducts_Call struct {
	*mock.Call
}

// ReserveProducts is a helper method to define mock.On call
//   - ctx context.Context
//   - products []models.ProductsToReserve
func (_e *MockRepositoryInterface_Expecter) ReserveProducts(ctx interface{}, products interface{}) *MockRepositoryInterface_ReserveProducts_Call {
	return &MockRepositoryInterface_ReserveProducts_Call{Call: _e.mock.On("ReserveProducts", ctx, products)}
}

func (_c *MockRepositoryInterface_ReserveProducts_Call) Run(run func(ctx context.Context, products []models.ProductsToReserve)) *MockRepositoryInterface_ReserveProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []models.ProductsToReserve
		if args[1] != nil {
			arg1 = args[1].([]models.ProductsToReserve)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryInterface_ReserveProducts_Call) Return(err error) *MockRepositoryInterface_ReserveProducts_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepositoryInterface_ReserveProducts_Call) RunAndReturn(run func(ctx context.Context, products []models.ProductsToReserve) error) *MockRepositoryInterface_ReserveProducts_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProduct provides a mock function for the type MockRepositoryInterface
func (_mock *MockRepositoryInterface) UpdateProduct(ctx context.Context, product models.Product, product_id int) error {
	ret := _mock.Called(ctx, product, product_id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Product, int) error); ok {
		r0 = returnFunc(ctx, product, product_id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepositoryInterface_UpdateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProduct'
type MockRepositoryInterface_UpdateProduct_Call struct {
	*mock.Call
}

// UpdateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - product models.Product
//   - product_id int
func (_e *MockRepositoryInterface_Expecter) UpdateProduct(ctx interface{}, product interface{}, product_id interface{}) *MockRepositoryInterface_UpdateProduct_Call {
	return &MockRepositoryInterface_UpdateProduct_Call{Call: _e.mock.On("UpdateProduct", ctx, product, product_id)}
}

func (_c *MockRepositoryInterface_UpdateProduct_Call) Run(run func(ctx context.Context, product models.Product, product_id int)) *MockRepositoryInterface_UpdateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.Product
		if args[1] != nil {
			arg1 = args[1].(models.Product)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepositoryInterface_UpdateProduct_Call) Return(err error) *MockRepositoryInterface_UpdateProduct_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepositoryInterface_UpdateProduct_Call) RunAndReturn(run func(ctx context.Context, product models.Product, product_id int) error) *MockRepositoryInterface_UpdateProduct_Call {
	_c.Call.Return(run)
	return _c
}
