// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Gergenus/commerce/product-service/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockServiceInterface creates a new instance of MockServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceInterface {
	mock := &MockServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServiceInterface is an autogenerated mock type for the ServiceInterface type
type MockServiceInterface struct {
	mock.Mock
}

type MockServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceInterface) EXPECT() *MockServiceInterface_Expecter {
	return &MockServiceInterface_Expecter{mock: &_m.Mock}
}

// AddCategory provides a mock function for the type MockServiceInterface
func (_mock *MockServiceInterface) AddCategory(ctx context.Context, category string) (int, error) {
	ret := _mock.Called(ctx, category)

	if len(ret) == 0 {
		panic("no return value specified for AddCategory")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return returnFunc(ctx, category)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = returnFunc(ctx, category)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, category)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceInterface_AddCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCategory'
type MockServiceInterface_AddCategory_Call struct {
	*mock.Call
}

// AddCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - category string
func (_e *MockServiceInterface_Expecter) AddCategory(ctx interface{}, category interface{}) *MockServiceInterface_AddCategory_Call {
	return &MockServiceInterface_AddCategory_Call{Call: _e.mock.On("AddCategory", ctx, category)}
}

func (_c *MockServiceInterface_AddCategory_Call) Run(run func(ctx context.Context, category string)) *MockServiceInterface_AddCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceInterface_AddCategory_Call) Return(n int, err error) *MockServiceInterface_AddCategory_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockServiceInterface_AddCategory_Call) RunAndReturn(run func(ctx context.Context, category string) (int, error)) *MockServiceInterface_AddCategory_Call {
	_c.Call.Return(run)
	return _c
}

// AddStockByID provides a mock function for the type MockServiceInterface
func (_mock *MockServiceInterface) AddStockByID(ctx context.Context, seller_id string, product_id int, number int) (int, error) {
	ret := _mock.Called(ctx, seller_id, product_id, number)

	if len(ret) == 0 {
		panic("no return value specified for AddStockByID")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) (int, error)); ok {
		return returnFunc(ctx, seller_id, product_id, number)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) int); ok {
		r0 = returnFunc(ctx, seller_id, product_id, number)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = returnFunc(ctx, seller_id, product_id, number)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceInterface_AddStockByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddStockByID'
type MockServiceInterface_AddStockByID_Call struct {
	*mock.Call
}

// AddStockByID is a helper method to define mock.On call
//   - ctx context.Context
//   - seller_id string
//   - product_id int
//   - number int
func (_e *MockServiceInterface_Expecter) AddStockByID(ctx interface{}, seller_id interface{}, product_id interface{}, number interface{}) *MockServiceInterface_AddStockByID_Call {
	return &MockServiceInterface_AddStockByID_Call{Call: _e.mock.On("AddStockByID", ctx, seller_id, product_id, number)}
}

func (_c *MockServiceInterface_AddStockByID_Call) Run(run func(ctx context.Context, seller_id string, product_id int, number int)) *MockServiceInterface_AddStockByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockServiceInterface_AddStockByID_Call) Return(n int, err error) *MockServiceInterface_AddStockByID_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockServiceInterface_AddStockByID_Call) RunAndReturn(run func(ctx context.Context, seller_id string, product_id int, number int) (int, error)) *MockServiceInterface_AddStockByID_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProduct provides a mock function for the type MockServiceInterface
func (_mock *MockServiceInterface) CreateProduct(ctx context.Context, product models.Product) (int, error) {
	ret := _mock.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Product) (int, error)); ok {
		return returnFunc(ctx, product)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Product) int); ok {
		r0 = returnFunc(ctx, product)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.Product) error); ok {
		r1 = returnFunc(ctx, product)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceInterface_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type MockServiceInterface_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - product models.Product
func (_e *MockServiceInterface_Expecter) CreateProduct(ctx interface{}, product interface{}) *MockServiceInterface_CreateProduct_Call {
	return &MockServiceInterface_CreateProduct_Call{Call: _e.mock.On("CreateProduct", ctx, product)}
}

func (_c *MockServiceInterface_CreateProduct_Call) Run(run func(ctx context.Context, product models.Product)) *MockServiceInterface_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.Product
		if args[1] != nil {
			arg1 = args[1].(models.Product)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceInterface_CreateProduct_Call) Return(n int, err error) *MockServiceInterface_CreateProduct_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockServiceInterface_CreateProduct_Call) RunAndReturn(run func(ctx context.Context, product models.Product) (int, error)) *MockServiceInterface_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductByID provides a mock function for the type MockServiceInterface
func (_mock *MockServiceInterface) GetProductByID(ctx context.Context, id int) (models.Product, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 models.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (models.Product, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) models.Product); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Product)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceInterface_GetProductByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductByID'
type MockServiceInterface_GetProductByID_Call struct {
	*mock.Call
}

// GetProductByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockServiceInterface_Expecter) GetProductByID(ctx interface{}, id interface{}) *MockServiceInterface_GetProductByID_Call {
	return &MockServiceInterface_GetProductByID_Call{Call: _e.mock.On("GetProductByID", ctx, id)}
}

func (_c *MockServiceInterface_GetProductByID_Call) Run(run func(ctx context.Context, id int)) *MockServiceInterface_GetProductByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceInterface_GetProductByID_Call) Return(product models.Product, err error) *MockServiceInterface_GetProductByID_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockServiceInterface_GetProductByID_Call) RunAndReturn(run func(ctx context.Context, id int) (models.Product, error)) *MockServiceInterface_GetProductByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetStockByID provides a mock function for the type MockServiceInterface
func (_mock *MockServiceInterface) GetStockByID(ctx context.Context, product_id int) (int, error) {
	ret := _mock.Called(ctx, product_id)

	if len(ret) == 0 {
		panic("no return value specified for GetStockByID")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return returnFunc(ctx, product_id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = returnFunc(ctx, product_id)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, product_id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceInterface_GetStockByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStockByID'
type MockServiceInterface_GetStockByID_Call struct {
	*mock.Call
}

// GetStockByID is a helper method to define mock.On call
//   - ctx context.Context
//   - product_id int
func (_e *MockServiceInterface_Expecter) GetStockByID(ctx interface{}, product_id interface{}) *MockServiceInterface_GetStockByID_Call {
	return &MockServiceInterface_GetStockByID_Call{Call: _e.mock.On("GetStockByID", ctx, product_id)}
}

func (_c *MockServiceInterface_GetStockByID_Call) Run(run func(ctx context.Context, product_id int)) *MockServiceInterface_GetStockByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceInterface_GetStockByID_Call) Return(n int, err error) *MockServiceInterface_GetStockByID_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockServiceInterface_GetStockByID_Call) RunAndReturn(run func(ctx context.Context, product_id int) (int, error)) *MockServiceInterface_GetStockByID_Call {
	_c.Call.Return(run)
	return _c
}

// Products provides a mock function for the type MockServiceInterface
func (_mock *MockServiceInterface) Products(ctx context.Context, name string, offset string, limit string) ([]models.Product, error) {
	ret := _mock.Called(ctx, name, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for Products")
	}

	var r0 []models.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) ([]models.Product, error)); ok {
		return returnFunc(ctx, name, offset, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) []models.Product); ok {
		r0 = returnFunc(ctx, name, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, name, offset, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceInterface_Products_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Products'
type MockServiceInterface_Products_Call struct {
	*mock.Call
}

// Products is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - offset string
//   - limit string
func (_e *MockServiceInterface_Expecter) Products(ctx interface{}, name interface{}, offset interface{}, limit interface{}) *MockServiceInterface_Products_Call {
	return &MockServiceInterface_Products_Call{Call: _e.mock.On("Products", ctx, name, offset, limit)}
}

func (_c *MockServiceInterface_Products_Call) Run(run func(ctx context.Context, name string, offset string, limit string)) *MockServiceInterface_Products_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockServiceInterface_Products_Call) Return(products []models.Product, err error) *MockServiceInterface_Products_Call {
	_c.Call.Return(products, err)
	return _c
}

func (_c *MockServiceInterface_Products_Call) RunAndReturn(run func(ctx context.Context, name string, offset string, limit string) ([]models.Product, error)) *MockServiceInterface_Products_Call {
	_c.Call.Return(run)
	return _c
}

// ReserveProducts provides a mock function for the type MockServiceInterface
func (_mock *MockServiceInterface) ReserveProducts(ctx context.Context, products []models.ProductsToReserve) ([]models.ProductsToReserve, error) {
	ret := _mock.Called(ctx, products)

	if len(ret) == 0 {
		panic("no return value specified for ReserveProducts")
	}

	var r0 []models.ProductsToReserve
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []models.ProductsToReserve) ([]models.ProductsToReserve, error)); ok {
		return returnFunc(ctx, products)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []models.ProductsToReserve) []models.ProductsToReserve); ok {
		r0 = returnFunc(ctx, products)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ProductsToReserve)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []models.ProductsToReserve) error); ok {
		r1 = returnFunc(ctx, products)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceInterface_ReserveProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReserveProducts'
type MockServiceInterface_ReserveProducts_Call struct {
	*mock.Call
}

// ReserveProducts is a helper method to define mock.On call
//   - ctx context.Context
//   - products []models.ProductsToReserve
func (_e *MockServiceInterface_Expecter) ReserveProducts(ctx interface{}, products interface{}) *MockServiceInterface_ReserveProducts_Call {
	return &MockServiceInterface_ReserveProducts_Call{Call: _e.mock.On("ReserveProducts", ctx, products)}
}

func (_c *MockServiceInterface_ReserveProducts_Call) Run(run func(ctx context.Context, products []models.ProductsToReserve)) *MockServiceInterface_ReserveProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []models.ProductsToReserve
		if args[1] != nil {
			arg1 = args[1].([]models.ProductsToReserve)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceInterface_ReserveProducts_Call) Return(productsToReserves []models.ProductsToReserve, err error) *MockServiceInterface_ReserveProducts_Call {
	_c.Call.Return(productsToReserves, err)
	return _c
}

func (_c *MockServiceInterface_ReserveProducts_Call) RunAndReturn(run func(ctx context.Context, products []models.ProductsToReserve) ([]models.ProductsToReserve, error)) *MockServiceInterface_ReserveProducts_Call {
	_c.Call.Return(run)
	return _c
}
